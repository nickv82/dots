set nocompatible        " must be first line

" Smart Copy paste 
if has ("unix") && "Darwin" != system("echo -n \"$(uname)\"")
    " on Linux use + register for copy-paste
    set clipboard=unnamedplus
else
    " one mac and windows, use * register for copy-paste
    set clipboard=unnamed
endif


" Vundle support {
set rtp+=~/.vim/bundle/vundle
call vundle#rc()
source ~/.vim/vundles.vim


filetype plugin indent on   " Automatically detect file types.
syntax on                   " syntax highlighting
set mouse=a                 " automatically enable mouse usage
scriptencoding utf-8

set viewoptions=folds,options,cursor,unix,slash " better unix / windows compatibility
set virtualedit=onemore         " allow for cursor beyond last character
set history=1000                " Store a ton of history (default is 20)
set hidden                      " allow buffer switching without saving

set tabpagemax=15               " only show 15 tabs
set showmode                    " display the current mode

set cursorline                  " highlight current line
set laststatus=2

if has('cmdline_info')
    set ruler                   " show the ruler
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " a ruler on steroids
    set showcmd                 " show partial commands in status line and
                                " selected characters/lines in visual mode
endif

set backspace=indent,eol,start  " backspace for dummies
set linespace=0                 " No extra spaces between rows
set nu                          " Line numbers on
set showmatch                   " show matching brackets/parenthesis
set incsearch                   " find as you type search
set hlsearch                    " highlight search terms
set winminheight=0              " windows can be 0 line high
set ignorecase                  " case insensitive search
set smartcase                   " case sensitive when uc present
set wildmenu                    " show list instead of just completing
set wildmode=list:longest,full  " command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " backspace and cursor keys wrap to
set scrolljump=5                " lines to scroll when cursor leaves screen
set scrolloff=3                 " minimum lines to keep above and below cursor
set foldenable                  " auto fold code
set list
set listchars=tab:,.,trail:.,extends:#,nbsp:. " Highlight problematic whitespace

let mapleader=";"           "Changes Leader key into a comma instead of a backslash

" disable ex mode, I do this too often by mistake
noremap Q q

"cmd line mode
cnoremap <C-A> <Home>
cnoremap <C-E> <End>

"Following line clears the search highlights when pressing space
nnoremap <space> :nohlsearch<cr>

"navigation and pwd mappings
noremap  <leader>cd       :lcd %:h<cr>
map      <leader>e        :edit %h
map      <leader>w        :write %h
cnoremap %h               <C-R>=expand('%:h').'/'<cr>
cnoremap %t               <C-R>=expand('%:t').'/'<cr>

"jump back and forth between buffers
noremap  <leader><leader> <C-^>

"quick save and back to normal mode
inoremap <c-f>            <esc>:w<cr>
noremap  <c-f>            :w<cr>
inoremap kj               <esc>

"edit vimrc
map      <leader>ev       :e ~/dots/vim/vimrc.symlink<cr>
map      <leader>sv       :source $MYVIMRC<cr>

" ctrl v in insert mode pastes
imap <c-v> <c-r>"

"easy visual mode indenting
vnoremap < <gv
vnoremap > >gv
" }
" Window Nvaigation {
function! WinMove(key) 
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr()) "we havent moved
    if (match(a:key,'[jk]')) "were we going up/down
      wincmd v
    else 
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction

map <leader>h              :call WinMove('h')<cr>
map <leader>k              :call WinMove('k')<cr>
map <leader>l              :call WinMove('l')<cr>
map <leader>j              :call WinMove('j')<cr>
map <leader>H              :wincmd H<cr>
map <leader>K              :wincmd K<cr>
map <leader>L              :wincmd L<cr>
map <leader>J              :wincmd J<cr>

"note these are inverted for up and left.
" easy to think of as push, ie push left
nmap <left>  :3wincmd <<cr>
nmap <right> :3wincmd ><cr>
nmap <up>    :3wincmd +<cr>
nmap <down>  :3wincmd -<cr>

map <leader>wc :wincmd q<cr>
map <leader>wr <C-W>r

nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>

" ulti snips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsListSnippets="<s-space>"

let g:UltiSnipsSnippetDirectories=["providedsnippets", "mysnippets"]
" controlp

let g:ctrlp_map = '<leader>f'
let g:ctrlp_cmd = 'CtrlP'

let g:CommandTAcceptSelectionVSplitMap = ['L']
let g:CommandTAcceptSelectionSplitMap  = ['J']

" Nerd Tree
noremap  <leader>ot       :NERDTreeToggle<cr>
noremap  <leader>ct       :NERDTreeClose<cr>
noremap  <leader>rt       :NERDTreeClose<cr><leader>cd:NERDTree<cr>
noremap  <leader>cc       :NERDTreeFind<cr><C-W>l

" Simple Buffer Close 
nnoremap <silent> <leader>bc  :Sbd<cr>
nnoremap <silent> <leader>bcc :Sbdm<cr>
function! CloseAllBuffers()
  :set noconfirm
  :bufdo Sbdm 
  :set confirm
endfunction
nnoremap <silent> <leader>cab :call CloseAllBuffers()<cr>

" more intuitive completion c-y to choose !
inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"

nmap <leader>1 :set foldlevel=0<CR>
nmap <leader>2 :set foldlevel=1<CR>
nmap <leader>3 :set foldlevel=2<CR>

if has("autocmd")
     autocmd BufNewFile,BufRead RakeFile set ft=ruby

     " dont highlight markdown
     " autocmd BufNewFile,BufRead *.markdown set ft=markdown
     " autocmd BufNewFile,BufRead *.markdown set wrap
     " autocmd BufNewFile,BufRead *.markdown set lbr
 endif

set nowrap                      " wrap long lines
set autoindent                  " indent at the same level of the previous line
set shiftwidth=4                " use indents of 4 spaces
set expandtab                   " tabs are spaces, not tabs
set tabstop=4                   " an indentation every four columns
set softtabstop=4               " let backspace delete indent
set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)

" Remove trailing whitespaces and ^M chars
autocmd FileType c,cpp,java,php,javascript,python,twig,xml,yml autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))
autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig

if filereadable($HOME.'/dots/vim/vim.symlink/bundle/vim-colors-solarized/colors/solarized.vim')
    if has("gui_running")
        set cursorline                  "Highlight background of current line
        colorscheme solarized
        set background=dark
    else
        set cursorline                  "Highlight background of current line
        if !has('gui_running') && $TERM_PROGRAM == 'Apple_Terminal'
           let g:solarized_termcolors = &t_Co
           let g:solarized_termtrans = 1
           let g:solarized_contrast="high"  
         endif

         colorscheme solarized
         set background=dark
    endif
endif

if filereadable($HOME.'/.vimrc_local')
   source $HOME/.vimrc_local
endif
